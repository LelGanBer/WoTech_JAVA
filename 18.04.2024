this part

    int[] numbers = new int[5];

    numbers[0] = 1;
    numbers[1] = 7;
    numbers[2] = 3;
    numbers[3] = -2;
    numbers[4] = 100;

is totally the same as this

    int[] numbers = {1, 7, 3, -2, 100};


```java
/*
A step by step solution to the largest number (I will give hints only for largest number, but the solution for both are the same)

1.Define an int array that is x amounts large
 1.1. Put values in the array 
DONE
 
2.Define an int variable called maxNumber, this is where we store the value of largest number
 2.1. The value of maxNumber should be the first value of the array
 Done
 
3.Go through the array with a loop
 3.1. If the i number is bigger than the maxNumber, we need to change the value of maxNumber to i
 3.2. Repeat  3.1. on the next cycle until the end of the array
Print out - "Largest number of array is " + maxNumber 


*/


public class Main {
  public static void main(String[] args) {

    int[] numbers = new int[5];
    numbers[0] = 1;
    numbers[1] = 7;
    numbers[2] = 3;
    numbers[3] = -2;
    numbers[4] = 100;

    int maxNumber = numbers[0]; // maxNumber = 1

    if (numbers[0] > maxNumber){ // If 1 > 1
      maxNumber = numbers[0];
    }

    if (numbers[1] > maxNumber){ // If 7 > 1
      maxNumber = numbers[1];
    }

    if(numbers[2] > maxNumber){ // If 3 > 7
      maxNumber = numbers[2];
    }

    if(numbers[3] > maxNumber){// If -2 > 7
      maxNumber = numbers[3];
    }

    if(numbers[4] > maxNumber){ // If 100 > 7
      maxNumber = numbers[4];
    }

    System.out.println("Largest number of array is " + maxNumber);
    
  }
}
```

IF PART PREVIOUS IS THE SAME AS THIS UNDER:

    //We declare i as 0
    for(int i = 0; i < numbers.length; i++) { // If i < array size, we go in a loop
      //Start of the cycle
      System.out.println(i); // 0 1 2 3 4

      //End of the cycle
    } // At the end of the cycle we increment i by 1


TASK IN THE LESSON:

/*

We have an array with different numbers {1, 3, 4, 2, 5, 8}

User is providing a number

Check whether or not this number exists in the array
*/

import java.util.Scanner;

public class Main {
  public static void main(String[] args) {

    int[] numbers = { 1, 3, 4, 2, 5, 8 }; // numbers.length = size of the numbers = 6

    System.out.println("Please write your favourite digit");

    Scanner scanner = new Scanner(System.in);
    int favouriteNumber = scanner.nextInt();

    boolean isFound = false;
    
    for (int i = 0; i < numbers.length; i++) {

      if (numbers[i] == favouriteNumber) {
        isFound = true;
        break; //EXITS THE FOR LOOP ALTOGETHER, ignoring the i < numbers.length
      }
      
    }
    if(isFound){
      System.out.println("Your favourite number " + favouriteNumber + " is in the array");
    } else {
      System.out.println("Your favourite number " + favouriteNumber + " is NOT FOUND!");
    }
    
    scanner.close();
  }
}
INSTRUCTION FOR CODE ABOVE
```1. Define an array with numbers
2. Ask the user for a favouriteNumber
3. Defining a isFound boolean (represents whether or not the number is found)
4. Go through the array with a for loop
4.1. On every cycle we check whether or not the number is equal to the favouriteNumber
4.1.1. If it is, we set isFound to true and exit the searching loop with a "break;"
4.1.2. If it is not, we set isFound to false and we repeat the 4.1. steps 
5. At the end of the cycle we check whether or not isFound is true
5.1. If isFound == true -> Then we print your favourite number is found
5.2. If isFound == false -> Then we print NOT FOUND!
```


EASY GROUP TASKS:
EASY TASKS:
Easy: 
1. Fill the array with random numbers

2. Find the sum of all elements in the array. 
For example in an array like this:
[2, 3, 5, 1]
Result: 11 (2 + 3 + 5 + 1)

//1st and 2nd task Oskars suggest to combine in one.

3. Find all the elements in the array that is below 0
[-2, 3, -5, 1]
Result:
-2
-5

4. Fill the party list with people you would like to invite to the party.
Check whether or not "Anna" is in the array.
Check whether or not "Maris" is in the array.
["Oskars", "Anna", "Andris"]
Result: 
"Anna is in the party list"
"Maris is not in the party list"

//this task is the last one we did today  in lesson

DIFFICULT GROUP TASK:
Difficult: 
1. Given an array of integers, write a Java program to find the maximum sum of two integers in the array.

For example in an array like this:
[2, 3, 1, 5, 4]
The maximum sum would be 5 + 4

Very difficult
2. Fill the array with human names.
Check how many different names are in the array
["Oskars", "Anna", "Andris"]
Result: 3

["Andris", "Oskars", "Elizabeth", "Oskars",  "Elizabeth"]
Result: 3

["Oskars"] - An empty array
Result: 1
